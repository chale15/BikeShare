install.packages("vroom")
install.packages("ggally")
install.packages("GGally")
install.packages("DataExplorer")
install.packages("patchwork")
vroom(train.csv)
library(tidyverse)
library(tidymodels)
library(vroom)
library(DataExplorer)
library(patchwork)
library(GGally)
vroom(train.csv)
vroom(./train.csv)
vroom("train.csv")
setwd(./Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
setwd($/Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
setwd(/Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
setwd(Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
pwd
vroom(~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv)
vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
ggplot(data = train, mapping = aes(x = weather)) + geom_bar()
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = c("deepskyblue","deepskyblue3","deepskyblue4"))
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = c("deepskyblue","deepskyblue3","deepskyblue4"))
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather)) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather)) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather,fill = "deepskyblue","deepskyblue3","deepskyblue4")) + geom_bar()
ggplot(data = train, mapping = aes(x = weather,fill = "deepskyblue")) + geom_bar()
ggplot(data = train, mapping = aes(x = weather,color = "deepskyblue")) + geom_bar()
ggplot(data = train, mapping = aes(x = weather)) + geom_bar(fill = "deepskyblue")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
xlabs = "Type of Weather")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
xlabel = "Type of Weather")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
xlab = "Type of Weather")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
x = "Type of Weather")
weather_bar <- ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
x = "Type of Weather")
View(train)
count_over_time <- ggplot(data = tran, mapping = aes(x = datetime, y = count)) +
geom_point(fill = "forestgreen") + geom_smooth(se=FALSE)
count_over_time <-
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(fill = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(fill = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=2, colour = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, level = 0.6)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, level = 0.9)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, level = 0.2)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, n=60)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, n=120)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)")
ggplot(data = train, mapping = aes(x=season)) +
geom_boxplot()
train$season <- as.factor(train$season)
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot()
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot()
weather_bar <- ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",x = "Type of Weather", y="Count")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)", y = "Count")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot() +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
count_by_season <- ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot() +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
count_by_season <- ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot(fill = "darkgreen", alpha = .7) +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
ggplot(data = train, mapping = aes(x = datetime)) +
geom_line(aes(y = casual), color = "deepskyblue4", lwd= 3)
ggplot(data = train, mapping = aes(x = datetime)) +
geom_path(aes(y = casual), color = "deepskyblue4", lwd= 2)
ggplot(data = train, mapping = aes(x = datetime)) +
geom_line(aes(y = casual), color = "deepskyblue4", lwd= 1) + geom_smooth()
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 2) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)", y = "Count")
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
temp_count <- ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
four_plot <- (weather_bar + temp_count)/(count_over_time + count_by_season)
View(four_plot)
View(four_plot)
(weather_bar + temp_count)/(count_over_time + count_by_season)
temp_count <- ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, color = "red", lwd = 1) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)", y = "Count")
(weather_bar + temp_count)/(count_over_time + count_by_season)
four_plot <- (weather_bar + temp_count)/(count_over_time + count_by_season)
ggsave(four_plots.jpg, plot = four_plot)
ggsave("four_plots.jpg", plot = four_plot)
ggsave("four_plots.jpg", plot = four_plot, path = "~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/")
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
#Refactor
train$season <- as.factor(train$season, levels = c("Spring", "Summer", "Fall", "Winter"))
#Refactor
train$season <- factor(train$season, levels = c("Spring", "Summer", "Fall", "Winter"))
View(train)
train$weather <- factor(train$weather, levels = c("Sunny", "Cloudy", "Light Rain", "Heavy Rain"))
test <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/test.csv")
View(test)
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ .)
lm_predict <- predict(my_lm, new_data= test)
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
#Refactor
train$season <- as.factor(train$season, levels = c("Spring", "Summer", "Fall", "Winter"))
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
#Refactor
train$season <- as.factor(train$season)
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
lm_predict
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
lm_predict
#For Kaggle Submission
kaggle_submission <- lm_predict %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=kaggle_submission, file="~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/linearPreds.csv", delim=",")
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
test <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/test.csv")
#Refactor
train$season <- as.factor(train$season)
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
test$season <- as.factor(test$season)
levels(test$season) <- c("Spring", "Summer", "Fall", "Winter")
test$weather <- as.factor(test$weather)
levels(test$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
lm_predict
#For Kaggle Submission
kaggle_submission <- lm_predict %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=kaggle_submission, file="~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/linearPredsFactor.csv", delim=",")
n_1 <- 9
n_2 <- 4
y_bar_1 <- 16.0
y_bar_2 <- 12.0
s_1 <- sqrt(5.0)
s_2 <- sqrt(3.0)
install.packages("MASS")
library(MASS)
y_1 <- mvrnorm(n = n_1, mu = y_bar_1, Sigma = s_1)
mean(y_1)
s_p <- sqrt((8*(s_1^2) + 3*(s_2^2))/(n_1+n_2-2))
t_stat <- (y_bar_1-y_bar_2)/(spooled*(sqrt((1/n_1)+(1/n_2))))
t_stat <- (y_bar_1-y_bar_2)/(s_p*(sqrt((1/n_1)+(1/n_2))))
p_val <- pt(t_stat, df = 11)
p_val <- pt(t_stat, df = 11, lower.tail = FALSE)
CI_lower <- (y_bar_1 - y_bar_2) - t_stat*(s_p*sqrt((1/9)+(1/4)))
CI_upper <- (y_bar_1 - y_bar_2) + t_stat*(s_p*sqrt((1/9)+(1/4)))
critical_val <- qt(.9, df = 11)
CI_lower <- (y_bar_1 - y_bar_2) - critical_val*(s_p*sqrt((1/9)+(1/4)))
CI_upper <- (y_bar_1 - y_bar_2) + critical_val*(s_p*sqrt((1/9)+(1/4)))
t_stat <- (y_bar_1-y_bar_2)/((sqrt(((s_1^2)/n_1)+((s_2^2)/n_2))))
sqrt(5)*16
sqrt(5)*8
sqrt(5)*4
sqrt(5)*4 + 16
-sqrt(5)*4 + 16
test_1 <- c(16, 24.94427, 24.94427, 7.055728, 7.055728, 16, 16, 16, 16)
mean(test_1)
sd(test_1)
16 + sqrt(5)
9*sqrt(5)
9*sqrt(5)/4
16 + 9*sqrt(5)/4
16 - 9*sqrt(5)/4
test_1 <- c(16, 21.03115, 21.03115, 10.96885, 10.96885, 16, 16, 16, 16)
mean(test_1)
sd(test_1)
sqrt(5)
library(tidyverse)
library(tidymodels)
library(vroom)
library(glmnet)
library(rpart)
library(ranger)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare")
train <- vroom("train.csv")
test <- vroom("test.csv")
train <- train %>% mutate(count = log(count)) %>% select(-casual, -registered)
model_3 <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_engine("ranger") %>%
set_mode("regression")
recipe_3 <- recipe(count~., data = train) %>%
step_date(datetime, features = "dow") %>%
step_time(datetime, features="hour") %>%
step_rm(datetime, holiday, temp) %>%
step_mutate(working_hour = workingday * datetime_hour) %>%
step_mutate(season=factor(season, labels=c("Spring","Summer","Fall","Winter")),
#              holiday=factor(holiday),
workingday=factor(workingday),
weather= factor(ifelse(weather==4,3,weather), labels=c("Sunny","Cloudy","Rainy"))) %>%
step_mutate(datetime_hour=factor(datetime_hour),
datetime_dow = factor(datetime_dow)) #%>%
workflow_3 <- workflow() %>%
add_recipe(recipe_3) %>%
add_model(model_3)
tuning_param_grid <- grid_regular(mtry(range=c(1, 10)), min_n(), levels = 5)
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- workflow_3 %>%
tune_grid(resamples=folds,
grid=tuning_param_grid,
metrics=metric_set(rmse))
bestTune <- cv_results %>% select_best(metric="rmse")
final_wf <- workflow_3 %>% finalize_workflow(bestTune) %>%
fit(data = train)
final_preds <- final_wf %>% predict(new_data = test)
random_forest_kaggle_submission <- final_preds %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=exp(count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=random_forest_kaggle_submission, file="./Submissions/ForestPreds1.csv", delim=",")
tuning_param_grid <- grid_regular(mtry(range=c(1, 9)), min_n(), levels = 10)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- workflow_3 %>%
tune_grid(resamples=folds,
grid=tuning_param_grid,
metrics=metric_set(rmse))
bestTune <- cv_results %>% select_best(metric="rmse")
final_wf <- workflow_3 %>% finalize_workflow(bestTune) %>%
fit(data = train)
final_preds <- final_wf %>% predict(new_data = test)
random_forest_kaggle_submission <- final_preds %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=exp(count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=random_forest_kaggle_submission, file="./Submissions/ForestPreds2.csv", delim=",")
model_3 <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_engine("ranger") %>%
set_mode("regression")
model_3 <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_engine("ranger") %>%
set_mode("regression")
recipe_3 <- recipe(count~., data = train) %>%
step_date(datetime, features = "dow") %>%
step_time(datetime, features="hour") %>%
step_rm(datetime, holiday, temp) %>%
step_mutate(working_hour = workingday * datetime_hour) %>%
step_mutate(season=factor(season, labels=c("Spring","Summer","Fall","Winter")),
#              holiday=factor(holiday),
workingday=factor(workingday),
weather= factor(ifelse(weather==4,3,weather), labels=c("Sunny","Cloudy","Rainy"))) %>%
step_mutate(datetime_hour=factor(datetime_hour),
datetime_dow = factor(datetime_dow)) #%>%
workflow_3 <- workflow() %>%
add_recipe(recipe_3) %>%
add_model(model_3)
tuning_param_grid <- grid_regular(mtry(range=c(1, 9)), min_n(), levels = 5)
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- workflow_3 %>%
tune_grid(resamples=folds,
grid=tuning_param_grid,
metrics=metric_set(rmse))
bestTune <- cv_results %>% select_best(metric="rmse")
final_wf <- workflow_3 %>% finalize_workflow(bestTune) %>%
fit(data = train)
final_preds <- final_wf %>% predict(new_data = test)
random_forest_kaggle_submission <- final_preds %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=exp(count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=random_forest_kaggle_submission, file="./Submissions/ForestPreds3.csv", delim=",")
