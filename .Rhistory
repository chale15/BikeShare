install.packages("vroom")
install.packages("ggally")
install.packages("GGally")
install.packages("DataExplorer")
install.packages("patchwork")
vroom(train.csv)
library(tidyverse)
library(tidymodels)
library(vroom)
library(DataExplorer)
library(patchwork)
library(GGally)
vroom(train.csv)
vroom(./train.csv)
vroom("train.csv")
setwd(./Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
setwd($/Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
setwd(/Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
setwd(Desktop/Fall\ 2024/Stat\ 348/GitHubRepos/BikeShare)
pwd
vroom(~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv)
vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
ggplot(data = train, mapping = aes(x = weather)) + geom_bar()
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = c("deepskyblue","deepskyblue3","deepskyblue4"))
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = c("deepskyblue","deepskyblue3","deepskyblue4"))
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather)) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather)) + geom_bar(fill = "deepskyblue","deepskyblue3","deepskyblue4")
ggplot(data = train, mapping = aes(x = weather,fill = "deepskyblue","deepskyblue3","deepskyblue4")) + geom_bar()
ggplot(data = train, mapping = aes(x = weather,fill = "deepskyblue")) + geom_bar()
ggplot(data = train, mapping = aes(x = weather,color = "deepskyblue")) + geom_bar()
ggplot(data = train, mapping = aes(x = weather)) + geom_bar(fill = "deepskyblue")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
xlabs = "Type of Weather")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
xlabel = "Type of Weather")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
xlab = "Type of Weather")
ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
x = "Type of Weather")
weather_bar <- ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",
x = "Type of Weather")
View(train)
count_over_time <- ggplot(data = tran, mapping = aes(x = datetime, y = count)) +
geom_point(fill = "forestgreen") + geom_smooth(se=FALSE)
count_over_time <-
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(fill = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(fill = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=2, colour = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen") + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, level = 0.6)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, level = 0.9)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, level = 0.2)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, n=60)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, n=120)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE)
ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)")
ggplot(data = train, mapping = aes(x=season)) +
geom_boxplot()
train$season <- as.factor(train$season)
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot()
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot()
weather_bar <- ggplot(data = train, mapping = aes(x = weather)) +
geom_bar(fill = "deepskyblue") +
labs(title = "Weather Bar Plot",x = "Type of Weather", y="Count")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)", y = "Count")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot() +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
count_by_season <- ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot() +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
count_by_season <- ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
ggplot(data = train, mapping = aes(x=season, y = count)) +
geom_boxplot(fill = "darkgreen", alpha = .7) +
labs(title = "Bike Rental by Season", x = "Season", y = "Count")
ggplot(data = train, mapping = aes(x = datetime)) +
geom_line(aes(y = casual), color = "deepskyblue4", lwd= 3)
ggplot(data = train, mapping = aes(x = datetime)) +
geom_path(aes(y = casual), color = "deepskyblue4", lwd= 2)
ggplot(data = train, mapping = aes(x = datetime)) +
geom_line(aes(y = casual), color = "deepskyblue4", lwd= 1) + geom_smooth()
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 2) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)", y = "Count")
ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
temp_count <- ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1.5) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
four_plot <- (weather_bar + temp_count)/(count_over_time + count_by_season)
View(four_plot)
View(four_plot)
(weather_bar + temp_count)/(count_over_time + count_by_season)
temp_count <- ggplot(data = train, mapping = aes(x = temp, y = count)) +
geom_point(size=1, colour = "deepskyblue4", alpha = 0.8) + geom_smooth(se=FALSE, color = "red", lwd = 1) +
labs(title = "Bike Rentals by Temperature", x = "Temperature (Celsius)", y = "Count")
count_over_time <- ggplot(data = train, mapping = aes(x = datetime, y = count)) +
geom_point(size=1, colour = "forestgreen", alpha = 0.6) + geom_smooth(se=FALSE, color = "red", lwd = 1) +
labs(title = "Bike Rentals over Time", x = "Date (Year-Month)", y = "Count")
(weather_bar + temp_count)/(count_over_time + count_by_season)
four_plot <- (weather_bar + temp_count)/(count_over_time + count_by_season)
ggsave(four_plots.jpg, plot = four_plot)
ggsave("four_plots.jpg", plot = four_plot)
ggsave("four_plots.jpg", plot = four_plot, path = "~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/")
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
#Refactor
train$season <- as.factor(train$season, levels = c("Spring", "Summer", "Fall", "Winter"))
#Refactor
train$season <- factor(train$season, levels = c("Spring", "Summer", "Fall", "Winter"))
View(train)
train$weather <- factor(train$weather, levels = c("Sunny", "Cloudy", "Light Rain", "Heavy Rain"))
test <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/test.csv")
View(test)
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ .)
lm_predict <- predict(my_lm, new_data= test)
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
#Refactor
train$season <- as.factor(train$season, levels = c("Spring", "Summer", "Fall", "Winter"))
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
#Refactor
train$season <- as.factor(train$season)
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
lm_predict
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
lm_predict
#For Kaggle Submission
kaggle_submission <- lm_predict %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=kaggle_submission, file="~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/linearPreds.csv", delim=",")
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
test <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/test.csv")
#Refactor
train$season <- as.factor(train$season)
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
test$season <- as.factor(test$season)
levels(test$season) <- c("Spring", "Summer", "Fall", "Winter")
test$weather <- as.factor(test$weather)
levels(test$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
#Linear Regression
my_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = count ~ datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed)
lm_predict <- predict(my_lm, new_data= test)
lm_predict
#For Kaggle Submission
kaggle_submission <- lm_predict %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=kaggle_submission, file="~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/linearPredsFactor.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(DataExplorer)
library(patchwork)
library(GGally)
library(poissonreg)
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
test <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/test.csv")
#Refactor
train$season <- as.factor(train$season)
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
train$workingday <- factor(train$workingday)
train$holiday <- factor(train$holiday)
train <- train %>% select(-casual, -registered)
test$season <- as.factor(test$season)
levels(test$season) <- c("Spring", "Summer", "Fall", "Winter")
test$weather <- as.factor(test$weather)
levels(test$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
test$workingday <- factor(test$workingday)
test$holiday <- factor(test$holiday)
log_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = log(count) ~ .)
log_lm_predict <- predict(log_lm, new_data= test)
log_lin_kaggle_submission <- log_lm_predict %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=exp(count)) %>%
mutate(datetime=as.character(format(datetime)))
View(log_lin_kaggle_submission)
glimpse(train)
library(lubridate)
train <- train %>% select(-casual, -registered) %>% mutate(
dayOfWeek = wday(datetime, label=TRUE))
#Import Training and Testing Data
train <- vroom("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/train.csv")
#Wrangling
train$season <- as.factor(train$season)
levels(train$season) <- c("Spring", "Summer", "Fall", "Winter")
train$weather <- as.factor(train$weather)
levels(train$weather) <- c("Sunny", "Cloudy", "Light Rain", "Heavy Rain")
train$workingday <- factor(train$workingday)
train$holiday <- factor(train$holiday)
train <- train %>% select(-casual, -registered) %>% mutate(
dayOfWeek = wday(datetime, label=TRUE))
test$dayOfWeek <- wday(test$datetime, label=TRUE)
log_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = log(count) ~ .)
log_lm_predict <- predict(log_lm, new_data= test)
log_lin_kaggle_submission <- log_lm_predict %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=exp(count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=log_lin_kaggle_submission, file="~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare/log_linearPreds2.csv", delim=",")
log_lm_predict <- predict(log_lm, new_data= test, rankdeficient="NA")
View(test)
train$dayOfWeek <- wday(train$datetime, label=TRUE)
log_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(data = train, formula = log(count) ~ .)
log_lm_predict <- predict(log_lm, new_data= test)
View(test)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare")
train <- vroom("train.csv")
test <- vroom("test.csv")
library(tidyverse)
library(tidymodels)
library(vroom)
library(DataExplorer)
library(patchwork)
library(GGally)
library(poissonreg)
library(lubridate)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare")
train <- vroom("train.csv")
test <- vroom("test.csv")
bike_recipe <- recipe(count~., data = train) %>%
step_mutate(season=factor(season, labels=c("Spring","Summer","Fall","Winter")),
holiday=factor(holiday),
workingday=factor(workingday),
weather= factor(ifelse(weather==4,3,weather), labels=c("Sunny","Cloudy","Rainy"))) %>%
step_date(datetime, features = "dow") %>%
step_time(datetime, features=c("hour", "minute")) %>%
step_select(-casual, -registered, -datetime)
lin_model_1 <-linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
workflow_1 <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model_1) %>%
fit(data = train)
lin_preds_1 <- predict(workflow_1, new_data = test)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/BikeShare")
train <- vroom("train.csv")
test <- vroom("test.csv")
train <- train %>% select(-casual, -registered)
bike_recipe <- recipe(count~., data = train) %>%
step_mutate(season=factor(season, labels=c("Spring","Summer","Fall","Winter")),
holiday=factor(holiday),
workingday=factor(workingday),
weather= factor(ifelse(weather==4,3,weather), labels=c("Sunny","Cloudy","Rainy"))) %>%
step_date(datetime, features = "dow") %>%
step_time(datetime, features=c("hour", "minute")) %>%
step_select(-datetime)
lin_model_1 <-linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
workflow_1 <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model_1) %>%
fit(data = train)
lin_preds_1 <- predict(workflow_1, new_data = test)
train <- vroom("train.csv")
test <- vroom("test.csv")
train <- train %>% select(-casual, -registered)
bike_recipe <- recipe(count~., data = train) %>%
step_mutate(season=factor(season, labels=c("Spring","Summer","Fall","Winter")),
holiday=factor(holiday),
workingday=factor(workingday),
weather= factor(ifelse(weather==4,3,weather), labels=c("Sunny","Cloudy","Rainy"))) %>%
step_date(datetime, features = "dow") %>%
step_time(datetime, features=c("hour", "minute"))
lin_model_1 <-linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
workflow_1 <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model_1) %>%
fit(data = train)
lin_preds_1 <- predict(workflow_1, new_data = test)
train <- vroom("train.csv")
test <- vroom("test.csv")
train <- train %>% mutate(count = log(count)) %>% select(-casual, -registered)
bike_recipe <- recipe(count~., data = train) %>%
step_mutate(season=factor(season, labels=c("Spring","Summer","Fall","Winter")),
holiday=factor(holiday),
workingday=factor(workingday),
weather= factor(ifelse(weather==4,3,weather), labels=c("Sunny","Cloudy","Rainy"))) %>%
step_date(datetime, features = "dow") %>%
step_time(datetime, features=c("hour", "minute"))
lin_model_1 <-linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
workflow_1 <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model_1) %>%
fit(data = train)
lin_preds_1 <- predict(workflow_1, new_data = test)
recipe_kaggle_submission <- lin_preds_1 %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=exp(count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=recipe_kaggle_submission, file="recipePreds1.csv", delim=",")
View(train)
prepped <- prep(bike_recipe)
bake(prepped, new_data = train2)
bake(prepped, new_data = test)
train <- vroom("train.csv")
test <- vroom("test.csv")
train <- train %>% mutate(count = log(count)) %>% select(-casual, -registered)
bike_recipe <- recipe(count~., data = train) %>%
step_mutate(season=factor(season, labels=c("Spring","Summer","Fall","Winter")),
holiday=factor(holiday),
workingday=factor(workingday),
weather= factor(ifelse(weather==4,3,weather), labels=c("Sunny","Cloudy","Rainy"))) %>%
step_date(datetime, features = "dow") %>%
step_time(datetime, features="hour") %>%
step_mutate(datetime_hour=factor(datetime_hour))
lin_model_1 <-linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
workflow_1 <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model_1) %>%
fit(data = train)
lin_preds_1 <- predict(workflow_1, new_data = test)
recipe_kaggle_submission <- lin_preds_1 %>%
bind_cols(., test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count=exp(count)) %>%
mutate(datetime=as.character(format(datetime)))
vroom_write(x=recipe_kaggle_submission, file="recipePreds1.csv", delim=",")
vroom_write(x=recipe_kaggle_submission, file="recipePreds2.csv", delim=",")
View(train)
